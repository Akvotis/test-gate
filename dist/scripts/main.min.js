(()=>{"use strict";var __webpack_modules__={"./src/scripts/main.js":
/*!*****************************!*\
  !*** ./src/scripts/main.js ***!
  \*****************************/(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_posts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/posts.js */ "./src/scripts/modules/posts.js");\n/* harmony import */ var _modules_changeThemePost_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/changeThemePost.js */ "./src/scripts/modules/changeThemePost.js");\n\n\n;\n\n\ndocument.addEventListener("DOMContentLoaded", () => {\n    (0,_modules_posts_js__WEBPACK_IMPORTED_MODULE_0__["default"])();\n    (0,_modules_posts_js__WEBPACK_IMPORTED_MODULE_0__.filtering)();\n    (0,_modules_changeThemePost_js__WEBPACK_IMPORTED_MODULE_1__["default"])();\n});\n\n//# sourceURL=webpack://gate/./src/scripts/main.js?')},"./src/scripts/modules/changeThemePost.js":
/*!************************************************!*\
  !*** ./src/scripts/modules/changeThemePost.js ***!
  \************************************************/(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ changeThemePost)\n/* harmony export */ });\n// наблюдаем за изменениями в дом\r\n// если изменения произошли, запускаем функцию\r\nfunction changeThemePost() {\r\n    const root = document.querySelector('.js-root');\r\n\r\n    let observer = new MutationObserver(mutations => {\r\n        for (let mutation of mutations) {\r\n\r\n            for (let node of mutation.addedNodes) {\r\n                if (!(node instanceof HTMLElement)) continue;\r\n\r\n                change();\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    observer.observe(root, { childList: true, subtree: true });\r\n}\r\n\r\n// если уже есть отмеченные чекбоксы, меняем класс\r\n// при клике на чекбокс удаляем/добавляем класс смены темы поста\r\nfunction change() {\r\n    const checkboxes = document.querySelectorAll('.js-changeTheme');\r\n\r\n    if (checkboxes.length === 0) return;\r\n\r\n    for (const checkbox of checkboxes) {\r\n        if (checkbox.checked) {\r\n            checkbox.parentNode.parentNode.classList.add('post--black');\r\n        }\r\n        \r\n        checkbox.addEventListener('click', () => {\r\n            checkbox.parentNode.parentNode.classList.toggle('post--black');\r\n        });\r\n    }\r\n}\n\n//# sourceURL=webpack://gate/./src/scripts/modules/changeThemePost.js?")},"./src/scripts/modules/posts.js":
/*!**************************************!*\
  !*** ./src/scripts/modules/posts.js ***!
  \**************************************/(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ posts),\n/* harmony export */   \"filtering\": () => (/* binding */ filtering)\n/* harmony export */ });\n// ждём выполнения запроса на сервер\r\n// затем создаём шаблон поста и мапим данные запроса\r\n// вставляем шаблон в дом\r\nasync function posts() {\r\n    const data = await request();\r\n    const template = createTemplate(data);\r\n    const root = document.querySelector('.js-root');\r\n\r\n    if (!root) return;\r\n\r\n    root.insertAdjacentHTML('beforeend', template);\r\n}\r\n\r\n// делаем запрос на сервер\r\nconst request = () => {\r\n    const data = fetch('https://jsonplaceholder.typicode.com/posts/?_start=0&_limit=7')\r\n        .then(res => res.json())\r\n        .then(data => data)\r\n        .catch(err => console.error(err));\r\n\r\n    return data;\r\n}\r\n\r\nconst createTemplate = (posts) => {\r\n    const template = `\r\n        <div class=\"posts\">\r\n            ${posts.map(post => {\r\n                return `\r\n                    <div class=\"post\">\r\n                        <h3 class=\"post__title\">${post.title}</h3>\r\n                        <p class=\"post__text\">${post.body}</p>\r\n                        <label class=\"post__select\">\r\n                            <input type=\"checkbox\" name=\"post_${post.id}\" class=\"js-changeTheme\" />\r\n                            Select\r\n                        </label>\r\n                    </div>\r\n                `\r\n            }).join('')}\r\n        </div>\r\n    `;\r\n\r\n    return template;\r\n}\r\n\r\n// получаем value фильтра и фильтруем данные запроса по value\r\n// затем очищаем контейнер и вставляем отфильтрованные посты\r\n// при сбросе очищаем контейнер и вставляем все посты\r\n// также проверяем url параметры при загрузке страницы и если они есть, то применяем фильтр\r\nconst filtering = async () => {\r\n    const filter = document.querySelector('.js-filter');\r\n    const resetBtn = filter.querySelector('.js-reset');\r\n    const data = await request();\r\n    const root = document.querySelector('.js-root');\r\n    const urlSearch = document.location.search;\r\n\r\n    let params = new URLSearchParams(urlSearch);\r\n    let filtered;\r\n\r\n    params = params.get('title');\r\n\r\n    if(params) {\r\n        const input = filter.querySelector('input');\r\n\r\n        input.value = params;\r\n\r\n        filtered = data.filter(post => {\r\n            return post.title.includes(params);\r\n        });\r\n\r\n        const template = createTemplate(filtered);\r\n\r\n        root.replaceChildren();\r\n        root.insertAdjacentHTML('beforeend', template);\r\n    }\r\n\r\n    filter.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n\r\n        const filterValue = e.target[0].value.trim();\r\n\r\n        if(filterValue === '') return;\r\n\r\n        filtered = data.filter(post => {\r\n            return post.title.includes(filterValue);\r\n        });\r\n\r\n        const template = createTemplate(filtered);\r\n\r\n        root.replaceChildren();\r\n        root.insertAdjacentHTML('beforeend', template);\r\n\r\n        saveValueOnURL(filterValue);\r\n    });\r\n\r\n    resetBtn.addEventListener('click', () => reset(root));\r\n}\r\n\r\n// соxраняем данные фильтра в адрессной строке\r\n// если сбросили фильтр, то сбрасываем search параметры адрессной строки\r\nconst saveValueOnURL = (value, reset = false) => {\r\n    if (reset) {\r\n        window.history.pushState(\r\n            {},\r\n            '',\r\n            `${document.location.origin}`\r\n        )\r\n\r\n        return;\r\n    }\r\n\r\n    window.history.pushState(\r\n        {},\r\n        '',\r\n        `${document.location.origin}?title=${value}`\r\n    )\r\n}\r\n\r\nconst reset = (container) => {\r\n    container.replaceChildren();\r\n    posts();\r\n    saveValueOnURL(null, true);\r\n}\n\n//# sourceURL=webpack://gate/./src/scripts/modules/posts.js?")}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,r)=>{for(var n in r)__webpack_require__.o(r,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},__webpack_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/scripts/main.js")})();